{"version":3,"sources":["actions/index.js","services/city-service.js","services/weather-service.js","utils/index.js","components/search/search.js","components/search/index.js","components/suggestions/suggestions.js","components/suggestions/index.js","components/forecast-tabs/index.js","components/forecast-tabs/forecast-tabs.js","components/weather-card/img/500.svg","components/weather-card/img/501.svg","components/weather-card/img/600.svg","components/weather-card/img/601.svg","components/weather-card/img/602.svg","components/weather-card/img/611.svg","components/weather-card/img/612.svg","components/weather-card/img/616.svg","components/weather-card/img/701.svg","components/weather-card/img/711.svg","components/weather-card/img/721.svg","components/weather-card/img/731.svg","components/weather-card/img/741.svg","components/weather-card/img/751.svg","components/weather-card/img/761.svg","components/weather-card/img/762.svg","components/weather-card/img/771.svg","components/weather-card/img/781.svg","components/weather-card/img/800.svg","components/weather-card/img/801.svg","components/weather-card/img/802.svg","components/weather-card/img/803.svg","components/weather-card/img/804.svg","components/weather-card/img/icons/pressure.svg","components/weather-card/img/icons/humidity.svg","components/weather-card/img/icons/wind.svg","components/weather-card/img/index.js","components/weather-tabs/index.js","components/weather-tabs/weather-tabs.js","components/weather-card/index.js","components/weather-card/weather-card.js","components/weather-card/templates/current.js","components/weather-card/templates/one-day.js","components/weather-card/templates/seven-days.js","components/notification/index.js","components/notification/notification.js","components/spinner/index.js","components/spinner/spinner.js","components/error-boundary/error-boundary.js","components/error-boundary/index.js","components/app/app.js","components/app/index.js","reducers/index.js","store.js","index.js"],"names":["fetchCityPrompt","suggestions","query","filter","city","data","toLowerCase","includes","map","region_with_type","country","reduce","accum","value","find","push","length","trim","options","method","mode","headers","body","JSON","stringify","count","fetch","then","response","json","catch","error","convertForecast","seconds","timeZoneOffsetSeconds","Date","getTimezoneOffset","date","returnIntlDate","Intl","DateTimeFormat","format","month","day","match","toString","shortMonth","getMonth","minutes","hour","minute","slice","getDate","weekday","hours","number","fractionDigits","toFixed","Math","round","String","seaLevel","deg","full","short","currentTime","sunriseTime","sunsetTime","timezoneOffset","convertedTemp","convertedFeelingTemp","dt","sunrise","sunset","feels_like","temp","weather","wind_speed","wind_deg","humidity","pressure","morn","night","timeOfDay","feelingTemp","description","windSpeed","windDirection","weatherId","id","weatherObj","current","timezone_offset","daily","fetchOneCallForecast","a","fetchCityCoordinates","coord","path","lat","lon","result","err","Promise","r","reject","setForecast","payload","type","setLoadingStatus","fetchSearchInput","returnTabId","activeTabId","Number","returnStructuredPath","regExp","matchAll","groups","structuredPathCity","structuredPathParameter","singleCity","parameter","returnBackground","timesOfDay","bgcPath","mapDispatchToProps","Search","connect","searchInput","submitFunc","onsubmit","evt","preventDefault","toUpperCase","className","autoFocus","placeholder","onChange","target","onFocus","status","onSubmit","Suggestions","withRouter","suggestionsArr","history","location","pathname","to","exact","onClick","ForecastTabs","children","title","url","WeatherImgCollections","id500","id501","id600","id601","id602","id611","id612","id616","id701","id711","id721","id731","id741","id751","id761","id762","id771","id781","id800","id801","id802","id803","id804","WeatherIcons","wind","WeatherTabs","weatherForecasts","start","end","componentsArr","tabId","i","NavLinkPath","img","component","src","alt","WeatherCard","selectedTemplate","template","dayId","backgroundStyle","backgroundImage","style","currentTemplate","oneDayTemplate","values","sevenDaysTemplate","Notification","Spinner","ErrorBoundary","state","hasError","this","setState","props","emptyComponent","Component","App","timer","forecastTabData","searchSubmit","currentPath","pathRest","suggestionsStatusHandler","dataset","suggestion","search","keyHandler","key","pathCity","document","addEventListener","fetchForecast","prevProps","prevPathCity","clearTimeout","setTimeout","fetchSuggestions","routes","suggestionsBlock","searchInputStatus","cityNotFound","isLoading","render","params","test","onKeyUp","string","dispatch","forecast","finally","initialState","reducer","action","store","createStore","applyMiddleware","thunk","ReactDOM","getElementById"],"mappings":"ohBAGOA,GAAmB,I,4FCFjB,yE,gDACE,6C,gDAGgB,SAACC,EAAaC,GA6BrC,OA5BAD,EAAcA,EAAYE,QAAO,YAAoB,IAAZC,EAAW,EAAjBC,KAAMD,KAEvC,GAAIA,EAEF,SADAA,EAAOA,EAAKE,eACHC,SAASL,MAKnBM,KAAI,oBAAEH,KAAF,MAEJ,CACCD,KAHG,EAASA,KAIZK,iBAJG,EAAeA,iBAKlBC,QALG,EAAiCA,YAOrCC,QAAO,SAACC,EAAOC,GAKd,OAHKD,EAAME,MAAK,qBAAEV,OAAmBS,EAAMT,SACzCQ,EAAMG,KAAKF,GAEND,IACN,IAGDX,EAAYe,OAAS,KACvBf,EAAYe,OAAS,IAEhBf,K,KAGTD,gBAAkB,SAACE,GACjBA,EAAQA,EAAMI,cAAcW,OAC5B,IAAMC,EAAU,CACdC,OAAQ,OACRC,KAAM,OACNC,QAAS,CACP,eAAgB,mBAChB,OAAU,mBACV,cAAiB,qBAAW,EAAX,OAEnBC,KAAMC,KAAKC,UAAU,CAACtB,QAAOuB,MAAM,MAErC,OAAOC,MAAM,cAAD,MAAYR,GACrBS,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,gBAAE1B,EAAF,EAAEA,YAAF,mBAAmB,EAAnB,MAA8CA,EAAaC,MAChE4B,OAAM,SAAAC,GAAK,OAAIA,QDjDf/B,gBACP,EAA+B,I,yYEE7BgC,iBAAkB,mXAGG,SAACC,EAASC,GAG7B,OAAkB,IAAVD,EAA8C,GAF3C,IAAIE,KAAe,IAAVF,GAEYG,oBAA2B,IAAgC,IAAxBF,KANnD,gDASI,SAACD,EAASC,GAE9B,IAAIG,EAGFA,EADEH,EACK,IAAIC,KAAJ,YAAS,EAAT,MAAiCF,EAASC,IAG1C,IAAIC,KAAe,IAAVF,GAGlB,IAOMK,EAAiB,SAACpB,GAAD,OAAa,IAAIqB,KAAKC,eAAT,KAA8BtB,GAASuB,OAAOJ,IAG5EK,EAAQJ,EAAe,CAC3BK,IAAI,UACJD,MAAO,SACNE,MAAM,oCAAgBC,WACrBC,EAdwB,CAC1B,EAAE,qBAAQ,EAAE,qBAAQ,EAAE,iCACtB,EAAE,qBAAQ,EAAE,qBAAQ,EAAE,2BACtB,EAAE,2BAAS,EAAE,qBAAQ,EAAE,2BACvB,GAAG,qBAAQ,GAAG,2BAAS,GAAG,sBAUUT,EAAKU,WAAa,GAGlDC,EAAUV,EAAe,CAACW,KAAK,UAAWC,OAAO,YAAYC,MAAM,GAEzE,MAAM,CACJR,IAAKN,EAAKe,UACVV,QACAI,aACAO,QAASf,EAAe,CAACe,QAAQ,SACjCC,MAAOhB,EAAe,CAACW,KAAK,YAC5BD,cA7Cc,gDAkDG,SAACO,EAAQC,GAG5B,OAFAD,EAAUC,EAAkBD,EAAOE,QAAQD,GAAkBE,KAAKC,MAAMJ,IAE3D,EACL,IAAN,OAAWA,EAAX,SAEMA,EAAS,EACT,SAAN,OAAWK,OAAOL,GAAQJ,MAAM,GAAhC,SAEI,GAAN,OAAUI,EAAV,YA3DgB,gDA+DU,SAACM,GAAD,OAAcH,KAAKC,MAAME,EAAW,SA/D9C,gDAkEK,SAACC,GACtB,OAAKA,GAAO,OAASA,GAAO,KAASA,GAAO,GAAKA,EAAM,KAC9C,CAACC,KAAK,mDAAaC,MAAM,KAE9BF,GAAO,MAAQA,EAAM,KAChB,CAACC,KAAK,8FAAqBC,MAAM,WAEtCF,GAAO,MAAQA,EAAM,MAChB,CAACC,KAAK,yDAAcC,MAAM,UAE/BF,GAAO,OAASA,EAAM,MACjB,CAACC,KAAK,4EAAkBC,MAAM,gBAEnCF,GAAO,OAASA,EAAM,MACjB,CAACC,KAAK,iCAAUC,MAAM,UAE3BF,GAAO,OAASA,EAAM,MACjB,CAACC,KAAK,sEAAiBC,MAAM,gBAElCF,GAAO,OAASA,EAAM,MACjB,CAACC,KAAK,mDAAaC,MAAM,UAE9BF,GAAO,OAASA,EAAM,MACjB,CAACC,KAAK,wFAAoBC,MAAM,gBADzC,KAxFgB,gDA8FC,SAACC,EAAaC,EAAaC,EAAYjC,GAOxD,OAJA+B,EAAW,YAAG,EAAH,MAA2BA,EAAa/B,GACnDgC,EAAW,YAAG,EAAH,MAA2BA,EAAahC,GACnDiC,EAAU,YAAG,EAAH,MAA2BA,EAAYjC,GAE9C+B,GAAeC,GAAeD,GAAeE,EACxC,MAEF,WAxGU,gDA4GO,SAACtD,EAAOuD,GAC/B,IAEIC,EAAeC,EAFdC,EAA4F1D,EAA5F0D,GAAIC,EAAwF3D,EAAxF2D,QAASC,EAA+E5D,EAA/E4D,OAAQC,EAAuE7D,EAAvE6D,WAAYC,EAA2D9D,EAA3D8D,KAAMC,EAAqD/D,EAArD+D,QAASC,EAA4ChE,EAA5CgE,WAAYC,EAAgCjE,EAAhCiE,SAAUC,EAAsBlE,EAAtBkE,SAAUC,EAAYnE,EAAZmE,SAsBrF,MAjBI,kBAAOL,GAAqB,kBAAOD,GACrCL,EAAgB,CACdY,KAAK,YAAC,EAAF,MAA0BN,EAAKM,MACnCtC,IAAI,YAAC,EAAF,MAA0BgC,EAAKhC,KAClCuC,MAAM,YAAC,EAAF,MAA0BP,EAAKO,QAEtCZ,EAAuB,CACrBW,KAAK,YAAC,EAAF,MAA0BP,EAAWO,MACzCtC,IAAI,YAAC,EAAF,MAA0B+B,EAAW/B,KACxCuC,MAAM,YAAC,EAAF,MAA0BR,EAAWQ,SAGrC,kBAAOP,GAAqB,kBAAOD,IAC1CL,EAAa,YAAG,EAAH,MAA2BM,EAAM,GAC9CL,EAAoB,YAAG,EAAH,MAA2BI,IAG1C,CACLrC,KAAK,YAAC,EAAF,MAA2BkC,EAAIH,GACnCe,UAAU,YAAC,EAAF,MAAwBZ,EAAIC,EAASC,EAAQL,GACtDF,YAAY,YAAC,EAAF,MAA2BM,EAASJ,GAC/CD,WAAW,YAAC,EAAF,MAA2BM,EAAQL,GAC7CO,KAAMN,EACNe,YAAad,EACbe,YAAaT,EAAQ,GAAGS,YACxBC,UAAWT,EAAWpB,QAAQ,GAC9B8B,cAAc,YAAC,EAAF,MAA4BT,GACzCE,SAAS,YAAC,EAAF,MAAiCA,GACzCD,WACAS,UAAWZ,EAAQ,GAAGa,OA/IR,KAoJlBzD,gBAAkB,SAAC0D,GAGjB,OAFAA,EAAWC,QAAX,YAAqB,EAArB,MAAiDD,EAAWC,QAASD,EAAWE,iBAChFF,EAAWG,MAAQH,EAAWG,MAAMrF,KAAI,SAACK,GAAD,mBAAW,EAAX,MAAuCA,EAAO6E,EAAWE,oBAC1FF,IAvJS,KAyJhB1D,gB,KAGF8D,qB,uCAAuB,WAAO1F,GAAP,iBAAA2F,EAAA,sEACD,EAAKC,qBAAqB5F,GADzB,YACf6F,EADe,+BAGbC,EAAO,cAAI,GAAJ,kBAA4BD,EAAME,IAAlC,gBAA6CF,EAAMG,KAH7C,kBAIZ1E,MAAMwE,GACVvE,MAAK,SAAC0E,GAAD,OAAYA,EAAOxE,UACxBF,MAAK,SAACtB,GAAD,OAAU,EAAK2B,gBAAgB3B,MACpCyB,OAAM,SAACwE,GAAD,OAASA,MAPC,gCASd,IAAIC,SAAQ,SAACC,EAAGC,GAAJ,OAAcA,EAAO,6HATnB,2C,2DAavBT,qBAAuB,SAAC5F,GAAD,OACrBsB,MAAM,cAAI,GAAJ,gBAA8BtB,IACjCuB,MAAK,SAAC0E,GAAD,OAAYA,EAAOxE,UACxBF,MAAK,SAACtB,GAAD,OAAUA,EAAK4F,SACpBnE,OAAM,SAACwE,GAAD,OAASA,OF/KfR,EAAP,EAAOA,qBAGDY,EAAc,SAACC,GAAD,MAAa,CAC7BC,KAAK,eACLD,YAIEE,EAAmB,SAACF,GAAD,MAAa,CACpCC,KAAK,qBACLD,YAIIG,EAAmB,SAACH,GAAD,MAAa,CAClCC,KAAK,qBACLD,Y,uBGnBEI,EAAc,SAACC,GAAD,OAAiBC,OAAOD,EAAY7D,MAAM,EAAE,IAAM,GAGhE+D,EAAuB,SAAChB,GAC5B,IAAMiB,EAAM,YAAG,yDAAH,+DACRd,EAAM,YAAOH,EAAKkB,SAASD,IAE/B,GAAId,EAAOrF,OAAS,EAAG,CACrB,MAAkEqF,EAAO,GAAGgB,OAArEC,EAAP,EAAOA,mBAAoBC,EAA3B,EAA2BA,wBAAyBC,EAApD,EAAoDA,WAEpD,GAAIF,GAAsBC,EACxB,MAAO,CACLnH,KAAMkH,EACNG,UAAWF,GAGf,GAAIC,EACF,MAAO,CACLpH,KAAMoH,EACNC,UAAU,IAIhB,MAAO,CACLrH,KAAK,GACLqH,UAAU,KAKRC,EAAmB,SAACjC,EAAIkC,GAE5B,IAAIC,EAAO,GAkCX,OA/BInC,GAAM,KAAOA,GAAK,MACpBmC,EAAU,CACRjF,IAAI,UACJuC,MAAM,YAKNO,GAAM,KAAOA,GAAK,MACpBmC,EAAU,CACRjF,IAAI,WACJuC,MAAM,YAKNO,GAAM,KAAOA,GAAK,MACpBmC,EAAU,CACRjF,IAAI,UACJuC,MAAM,YAKC,MAAPO,IACFmC,EAAU,CACRjF,IAAI,QACJuC,MAAM,UAIJ,oBAAN,OAA2ByC,EAA3B,YAAyCC,EAAQD,GAAjD,M,eC9BIE,EAAqB,CAACf,oBCrCbgB,ED6CAC,aAVS,SAAC,GAAD,MAA6B,CAAClH,MAA9B,EAAEmH,YAAcnH,SAUAgH,EAAzBE,EAvCA,SAAC,GAA0C,IAAzCE,EAAwC,EAAxCA,WAAYpH,EAA4B,EAA5BA,MAAOiG,EAAqB,EAArBA,iBAkBlC,OATAoB,SAAW,SAACC,GACVA,EAAIC,iBACAvH,IACFA,EAAQA,EAAM,GAAGwH,cAAgBxH,EAAMsC,MAAM,GAC7C2D,EAAiB,CAACjG,UAClBoH,EAAWpH,KAKb,qBAAKyH,UAAU,SAAf,SACE,uBAAMA,UAAU,eAAhB,UACE,uBAAO1B,KAAK,OAAO0B,UAAU,gBAAgBC,WAAS,EAACC,YAAY,4EAAgBC,SAlBxE,SAAC,GAAD,IAAU5H,EAAV,EAAE6H,OAAQ7H,MAAV,OAAsBiG,EAAiB,CAACjG,WAkBoDA,MAAOA,EACvG8H,QAhBG,kBAAM7B,EAAiB,CAAC8B,QAAO,KAgBhB,mBACzB,wBAAQN,UAAU,iBAAiB1B,KAAK,SAASiC,SAAUX,SAAU,iBAArE,oD,QEOFL,G,MAAqB,CAACf,qBCpCbgC,EDgDAC,YAAWhB,aAdF,iBAAO,KAcoBF,EAAzBE,EAvCN,SAAC,GAAgD,IAA/CiB,EAA8C,EAA9CA,eAAgBlC,EAA8B,EAA9BA,iBAAkBmC,EAAY,EAAZA,QAE/CxB,EAAaP,EAAqB+B,EAAQC,SAASC,UAAnD1B,UAoBP,OAjBAuB,EAAiBA,EAAexI,KAAI,WAAoCiF,GAAO,IAAzCrF,EAAwC,EAAxCA,KAAMM,EAAkC,EAAlCA,QAASD,EAAyB,EAAzBA,iBAG/CyF,EAAiB,KAATuB,EAAD,WAAyBrH,EAAzB,YAAiCqH,GAAjC,WAAkDrH,EAAlD,KAOX,OACE,eAAC,IAAD,CAASkI,UAAU,aAAac,GAAIlD,EAAM,qBAAyBmD,OAAK,EAACC,QALzD,WAChBxC,EAAiB,CAAC8B,QAAQ,EAAO/H,MAAOT,KAIxC,UACE,sBAAMkI,UAAU,mBAAmB,qBAAnC,SAAoDlI,IADtD,IACmE,sBAAMkI,UAAU,qBAAqB,qBAArC,mBAAyD7H,EAAzD,aAA8EC,OADlF+E,MAM3D,qBAAK6C,UAAU,cAAc,sBAA7B,SAA+CU,QE/B1CO,G,MCMM,SAAC,GAAD,IAAEnJ,EAAF,EAAEA,KAAMoJ,EAAR,EAAQA,SAAR,OACnB,oBAAIlB,UAAU,gBAAd,SACGkB,EAAShJ,KAAI,gBAAEiF,EAAF,EAAEA,GAAIgE,EAAN,EAAMA,MAAOC,EAAb,EAAaA,IAAb,OACZ,oBAAIpB,UAAU,eAAd,SAAsC,cAAC,IAAD,CAASc,GAAE,WAAMhJ,EAAN,YAAcsJ,GAAOL,OAAK,EAArC,SAAuCI,KAA3ChE,UCVzB,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,gCCA1B,OAA0B,gCCA1B,OAA0B,gCCA1B,OAA0B,gCCA1B,OAA0B,gCCA1B,OAA0B,gCCA1B,OAA0B,gCCA1B,OAA0B,gCCA1B,OAA0B,gCCA1B,OAA0B,gCCA1B,OAA0B,gCCA1B,OAA0B,qCCA1B,OAA0B,qCCA1B,OAA0B,iCC2BnCkE,GAAwB,CAC5BC,QACAC,QACAC,QACAC,QACAC,QACAC,QACAC,QACAC,QACAC,QACAC,QACAC,QACAC,QACAC,QACAC,SACAC,SACAC,SACAC,SACAC,SACAC,SACAC,SACAC,SACAC,SACAC,UAGIC,GAAe,CACnBnG,YACAD,YACAqG,SCvDaC,I,MCuEAtD,aARS,SAAC,GAAD,MAAsC,CAAC3H,KAAvC,EAAEA,KAA2CyF,MAA7C,EAAQyF,iBAAkBzF,SAQnCkC,EA/DK,SAAC,GAA+B,IAE9CwD,EAAOC,EAFS3F,EAA6B,EAA7BA,MAAOzF,EAAsB,EAAtBA,KAAM4G,EAAgB,EAAhBA,YAEjByE,EAAgB,GAGhC,GAAIzE,EAAY,CAEd,IAAM0E,EAAQ3E,EAAYC,GAEtB0E,EAAQ,GAAKA,EAAQ7F,EAAM7E,OAAS,GACtCuK,EAAQG,EAAQ,EAChBF,EAAME,EAAQ,GAGPA,IAAU7F,EAAM7E,OAAS,IAChCuK,EAAQG,EAAQ,EAChBF,EAAME,QAIRH,EAAQ,EACRC,EAAM,EAIR,IAAK,IAAIG,EAAIJ,EAAOI,GAAKH,EAAKG,IAAI,CAEhC,MAA2D9F,EAAM8F,GAA1DtJ,EAAP,EAAOA,KAAP,IAAasC,KAAMhC,EAAnB,EAAmBA,IAAKuC,EAAxB,EAAwBA,MAAQG,EAAhC,EAAgCA,YAAaG,EAA7C,EAA6CA,UAEzCoG,EAAqB,IAAND,EAAD,WAAgBvL,EAAhB,gBAA8BA,EAA9B,YAAsCuL,EAAI,EAA1C,QAEZE,EAAMlC,GAAsB,KAAD,OAAMnE,IAEnCsG,EACF,oBAAYxD,UAAU,oBAAtB,SACE,eAAC,IAAD,CAASc,GAAIwC,EAAatD,UAAU,cAAce,OAAK,EAAvD,UACE,qBAAKf,UAAU,mBAAf,SACE,oBAAGA,UAAU,oBAAb,UAAkCjG,EAAKM,IAAvC,IAA6CN,EAAKK,WAEpD,sBAAK4F,UAAU,mBAAf,UACE,gCACE,mBAAGA,UAAU,2BAAb,SAAyC3F,IACzC,mBAAG2F,UAAU,2BAAb,SAAyCpD,OAE3C,qBAAK6G,IAAKF,EAAKG,IAAK3G,EAAaiD,UAAU,6BAVxCqD,GAeXF,EAAc1K,KAAK+K,GAGrB,OAAQ,oBAAIxD,UAAU,eAAd,SAA8BmD,QC5DzBQ,I,MC2CAlE,aAfS,SAAC,GAAD,QAAEuD,iBAAF,MAAgD,CACtEA,iBAAiB,CAAC3F,QADI,EAAoBA,QACfE,MADL,EAA6BA,OAEnDzF,KAFsB,EAAqCA,QAe9C2H,EApCK,SAAC,GAA+C,IAI9DmE,EAJgBC,EAA6C,EAA7CA,SAAUb,EAAmC,EAAnCA,iBAAkBlL,EAAiB,EAAjBA,KAAMgM,EAAW,EAAXA,MAE/CzG,EAAkB2F,EAAlB3F,QAASE,EAASyF,EAATzF,MAIhB,OAAQsG,GACN,IAAI,UACFD,ECZkB,SAACrL,EAAOT,GAE9B,IAAOiC,EAAqIxB,EAArIwB,KAAM8C,EAA+HtE,EAA/HsE,UAAWjB,EAAoHrD,EAApHqD,YAAaC,EAAuGtD,EAAvGsD,WAAYQ,EAA2F9D,EAA3F8D,KAAMS,EAAqFvE,EAArFuE,YAAaC,EAAwExE,EAAxEwE,YAAaC,EAA2DzE,EAA3DyE,UAAWC,EAAgD1E,EAAhD0E,cAAeP,EAAiCnE,EAAjCmE,SAAUD,EAAuBlE,EAAvBkE,SAAUS,EAAa3E,EAAb2E,UAGzH6G,EAAkB,CACtBC,gBAAiB5E,EAAiBlC,EAAWL,IAG/C,OACE,sBAAKmD,UAAU,wBAAwBiE,MAAOF,EAA9C,UAEE,mBAAG/D,UAAU,8BAAb,SAA4ClI,IAC5C,mBAAGkI,UAAU,8BAAb,mBAA+CjG,EAAKM,IAApD,YAA2DN,EAAKK,MAAhE,aAA0EL,EAAKiB,MAA/E,YAAwFjB,EAAKW,WAC7F,sBAAKsF,UAAU,6BAAf,UACE,sBAAMA,UAAU,iCAAhB,wDAA4DpE,EAAYZ,MAAxE,YAAiFY,EAAYlB,WAC7F,sBAAMsF,UAAU,qCAAhB,SAAsD3D,IACtD,sBAAM2D,UAAU,gCAAhB,kDAA0DnE,EAAWb,MAArE,YAA8Ea,EAAWnB,cAE3F,oBAAGsF,UAAU,iCAAb,2EAA2DlD,KAC3D,mBAAGkD,UAAU,qCAAb,SAAmDjD,IAEnD,sBAAKiD,UAAU,6BAAf,UACE,sBAAKA,UAAU,8BAAf,UACE,qBAAKA,UAAU,qCACf,iCAAOhD,EAAP,mBAAwBC,EAAcvB,YAExC,sBAAKsE,UAAU,8BAAf,UACE,qBAAKA,UAAU,yCACf,iCAAOvD,EAAP,UAEF,sBAAKuD,UAAU,8BAAf,UACE,qBAAKA,UAAU,yCACf,iCAAOtD,EAAP,wDDrBewH,CAAgB7G,EAASvF,GAC5C,MACF,IAAI,SAEF8L,EEhBiB,SAACrL,EAAOT,GAG7B,IAAOiC,EAAiGxB,EAAjGwB,KAAMsC,EAA2F9D,EAA3F8D,KAAMS,EAAqFvE,EAArFuE,YAAaC,EAAwExE,EAAxEwE,YAAaG,EAA2D3E,EAA3D2E,UAAWF,EAAgDzE,EAAhDyE,UAAWC,EAAqC1E,EAArC0E,cAAeR,EAAsBlE,EAAtBkE,SAAUC,EAAYnE,EAAZmE,SAE5F,OACE,sBAAKsD,UAAU,yBAAf,UAEE,sBAAKA,UAAU,8BAAf,UACE,sBAAMA,UAAU,+BAAhB,SAAgDlI,IAChD,oBAAGkI,UAAU,+BAAb,oBAAgDjG,EAAKgB,SAArD,IAAgE,uBAAhE,cAA0EhB,EAAKM,IAA/E,YAAsFN,EAAKK,aAG7F,sBAAK4F,UAAU,iCAAf,UAEE,sBAAKA,UAAU,mCAAf,UACE,mBAAGA,UAAU,sCAAb,4CACA,mBAAGA,UAAU,sCAAb,SAAoD3D,EAAKM,UAG3D,sBAAKqD,UAAU,mCAAf,UACE,mBAAGA,UAAU,sCAAb,sCACA,mBAAGA,UAAU,sCAAb,SAAoD3D,EAAKhC,SAG3D,sBAAK2F,UAAU,mCAAf,UACE,mBAAGA,UAAU,sCAAb,4CACA,mBAAGA,UAAU,sCAAb,SAAoD3D,EAAKO,cAK7D,qBAAKoD,UAAU,8BAAf,SACE,mBAAGA,UAAU,mCAAb,0FAGF,sBAAKA,UAAU,iCAAf,UAEE,qBAAKA,UAAU,mCAAf,SACE,mBAAGA,UAAU,sCAAb,SAAoDlD,EAAYH,SAGlE,qBAAKqD,UAAU,mCAAf,SACE,mBAAGA,UAAU,sCAAb,SAAoDlD,EAAYzC,QAIlE,qBAAK2F,UAAU,mCAAf,SACE,mBAAGA,UAAU,sCAAb,SAAoDlD,EAAYF,aAKpE,sBAAKoD,UAAU,gCAAf,UAEE,sBAAKA,UAAU,kCAAf,UACE,qBAAKyD,IAAKpC,GAAsB,KAAD,OAAMnE,IAAcwG,IAAI,GAClD1D,UAAU,gDACf,mBAAGA,UAAU,+BAAb,SAA6CjD,OAG/C,sBAAKiD,UAAU,kCAAf,UACE,qBAAKyD,IAAKZ,GAAaC,KAAMY,IAAI,GAAG1D,UAAU,gDAC9C,oBAAGA,UAAU,+BAAb,6FAA4DhD,EAA5D,kBAA4EC,EAAcvB,YAE5F,sBAAKsE,UAAU,kCAAf,UACE,qBAAKyD,IAAKZ,GAAapG,SAAUiH,IAAI,GAAG1D,UAAU,gDAClD,oBAAGA,UAAU,+BAAb,oEAAuDvD,EAAvD,UAEF,sBAAKuD,UAAU,kCAAf,UACE,qBAAKyD,IAAKZ,GAAanG,SAAUgH,IAAI,GAAG1D,UAAU,gDAClD,oBAAGA,UAAU,+BAAb,8DAAsDtD,EAAtD,wDFvDgByH,CAAe5G,EADnCuG,EAAQrF,EAAYqF,IAC6BhM,GACjD,MACF,IAAI,YACF8L,EGnBoB,SAACQ,EAAQtM,GAAT,OACxBsM,EAAOlM,KAAI,SAACK,EAAO4E,GAEjB,IAAOpD,EAAsCxB,EAAtCwB,KAAMsC,EAAgC9D,EAAhC8D,KAAMU,EAA0BxE,EAA1BwE,YAAaG,EAAa3E,EAAb2E,UAG1BqG,EAAMlC,GAAsB,KAAD,OAAMnE,IAEvC,OACE,sBAAK8C,UAAU,eAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,mBAAGA,UAAU,qBAAb,SAAmClI,IACnC,sBAAKkI,UAAU,qBAAf,UACE,mBAAGA,UAAU,oBAAb,SAAkCjG,EAAKM,MACvC,mBAAG2F,UAAU,sBAAb,SAAoCjG,EAAKS,mBAG7C,sBAAKwF,UAAU,oBAAf,UACE,gCACE,mBAAGA,UAAU,4BAAb,SAA0C3D,EAAKhC,MAC/C,mBAAG2F,UAAU,4BAAb,SAA0C3D,EAAKO,WAEjD,qBAAK6G,IAAKF,EAAKG,IAAK3G,EAAaiD,UAAU,0BAE7C,sBAAMA,UAAU,4BAAhB,SAA6CjD,MAfZI,MHUhBkH,CAAkB9G,EAAOzF,GAGhD,OAAQ,yBAASkI,UAAU,gBAAnB,SAAoC4D,QIzB/BU,I,MCGM,SAAC,GAAD,IAAEpD,EAAF,EAAEA,SAAF,OAAiB,qBAAKlB,UAAU,eAAf,SAA+BkB,MCHtDqD,I,MCGC,kBACZ,qBAAKvE,UAAU,UAAf,SACE,qBAAKA,UAAU,wCAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,gCCLWwE,G,4MAEnBC,MAAQ,CACNC,UAAU,G,uDAGZ,WACEC,KAAKC,SAAS,CAACF,UAAU,M,oBAG3B,WAEE,OAAIC,KAAKF,MAAMC,SACTC,KAAKE,MAAMC,eACN,6BAEF,cAAC,GAAD,6GAEFH,KAAKE,MAAM3D,a,GAlBqB6D,aCF5BP,MCgBTQ,I,kNAEJP,MAAQ,CACNQ,MAAO,M,EAITC,gBAAkB,CAChB,CAAC/H,GAAI,EAAGgE,MAAM,uCAAWC,IAAI,OAC7B,CAACjE,GAAI,EAAGgE,MAAM,6CAAYC,IAAI,IAC9B,CAACjE,GAAI,EAAGgE,MAAM,uCAAWC,IAAI,SAC7B,CAACjE,GAAI,EAAGgE,MAAM,6BAAWC,IAAI,S,EAI/B+D,a,uCAAe,WAAOrN,GAAP,mBAAA2F,EAAA,sDACP2H,EAAc,EAAKP,MAAMlE,QAAQC,SAASC,SADnC,EAEiBjC,EAAqBwG,GAAjCC,EAFL,EAENlG,UACP,EAAK0F,MAAMlE,QAAQlI,KAAnB,WAA4BX,EAA5B,YAAoCuN,IACpC,EAAKR,MAAMrG,iBAAiB,CAAC8B,QAAO,IAJvB,2C,wDAQfgF,yBAA2B,YAAwB,IAAdC,EAAa,EAArBnF,OAAQmF,QAC9BA,EAAQC,YAAeD,EAAQE,SAAU,EAAKZ,MAAMnF,YAAYY,QACnE,EAAKuE,MAAMrG,iBAAiB,CAAC8B,QAAO,K,EAKxCoF,WAAa,SAAC7F,GACR,QAAAA,EAAI8F,KACN,EAAKL,yBAAyBzF,I,uDAKlC,WACE,IAAa+F,EAAYhH,EAAqB+F,KAAKE,MAAMjE,SAASC,UAA3D/I,KACP+N,SAASC,iBAAT,QAAmCnB,KAAKW,0BAGpCM,GAAWjB,KAAKE,MAAMkB,cAAcH,K,gCAG1C,SAAmBI,GAAY,IAAD,OACfJ,EAAYhH,EAAqB+F,KAAKE,MAAMjE,SAASC,UAA3D/I,KACMmO,EAAgBrH,EAAqBoH,EAAUpF,SAASC,UAA9D/I,KAGH8N,GAAYA,IAAaK,GAC3BtB,KAAKE,MAAMkB,cAAcH,GAIvBI,EAAUtG,YAAYnH,QAAUoM,KAAKE,MAAMnF,YAAYnH,QACzD2N,aAAavB,KAAKF,MAAMQ,OACxBN,KAAKC,SAAS,CAACK,MAAOkB,YAAW,kBAC/B,EAAKtB,MAAMuB,iBAAiB,EAAKvB,MAAMnF,YAAYnH,SAAO,U,oBAIhE,WAAU,IAIJ8N,EAAQC,EAJL,OAEP,EAAkI3B,KAAKE,MAAhI/M,EAAP,EAAOA,KAAP,IAAakL,iBAAmBzF,EAAhC,EAAgCA,MAAOF,EAAvC,EAAuCA,QAAU1F,EAAjD,EAAiDA,YAAkC4O,EAAnF,EAA8D7G,YAAaY,OAA4BkG,EAAvG,EAAuGA,aAAcC,EAArH,EAAqHA,UA6CrH,OAzCIlJ,GAASF,GAAWvF,IAAS0O,IAAiBC,IAChDJ,EACE,eAAC,GAAD,WACE,cAAC,IAAD,CAAOK,OAAQ,kBACb,cAAC,EAAD,CAAc5O,KAAMA,EAApB,SAA2B,EAAKoN,qBAElC,cAAC,IAAD,CAAOtH,KAAI,WAAM9F,EAAN,QAAkBiJ,OAAK,EAC3B2F,OAAQ,kBAAO,cAAC,GAAD,CAAa7C,SAAS,eAE5C,cAAC,IAAD,CAAOjG,KAAI,WAAM9F,EAAN,KAAeiJ,OAAK,EAAC2F,OAAQ,gBAAiBvJ,EAAjB,EAAE7C,MAAOqM,OAAQxJ,GAAjB,OACpC,qCAAE,cAAC,GAAD,CAAauB,YAAavB,IAC1B,cAAC,GAAD,CAAa0G,SAAS,SAASC,MAAM,gBAG3C,cAAC,IAAD,CAAOlG,KAAI,WAAM9F,EAAN,QAAkBiJ,OAAK,EAAC2F,OAAQ,YAAc,IAEhDvJ,EAF+C,EAAX7C,MAExBqM,OAAZxJ,GAIP,GAFmB,YAEHyJ,KAAKzJ,GAIrB,OAAQ,qCAAE,cAAC,GAAD,CAAauB,YAAavB,IAC1B,cAAC,GAAD,CAAa0G,SAAS,SAASC,MAAO3G,UAGlD,cAAC,IAAD,CAAOS,KAAI,WAAM9F,EAAN,SAAmBiJ,OAAK,EAC5B2F,OAAQ,kBAAO,cAAC,GAAD,CAAa7C,SAAS,qBAI9C2C,IACFH,EAAS,cAAC,GAAD,qIAGP1O,GAAe4O,IACjBD,EAAmB,cAAC,GAAD,CAAexB,gBAAgB,EAA/B,SAAqC,cAAC,EAAD,CAAapE,eAAgB/I,OAIrF,sBAAKwF,GAAG,MAAM0J,QAASlC,KAAKe,WAA5B,UACE,cAAC,IAAD,CAAO9H,KAAI,IAAO8I,OAAQ,kBACvB,qCAAE,cAAC,EAAD,CAAQ/G,WAAY,EAAKwF,eAC1BmB,QAEHG,GAAa,cAAC,GAAD,IACbJ,S,GApHStB,cA2IZxF,GAAoB,CACtB6G,iBlD/GqB,SAACU,GAAD,OAAY,SAACC,GACpCrP,EAAgBoP,GACbzN,MAAK,SAACgF,GAAD,OAAa0I,EAAS,CAC1BzI,KAAK,oBACLD,iBkD4GFG,mBACAuH,clDtIkB,SAACjO,GAAD,OAAU,SAACiP,GAE/BA,EAASxI,GAAiB,IAE1Bf,EAAqB1F,GAClBuB,MAAK,SAAC2N,GAAD,OAAcD,EAAS3I,EAAY,CACrC4I,WACAlP,OACA0O,cAAc,QAGjBhN,OAAM,kBAAMuN,EAAS3I,EAAY,CAC9B4I,SAAU,GACVlP,OACA0O,cAAc,QAGjBS,SAAQ,kBAAMF,EAASxI,GAAiB,UmDzC9ByG,GDmKAvE,YAAWhB,aAFF,SAACgF,GAAD,sBAAgBA,KAEWlF,GAAzBE,CAA6CuF,K,SEnKjEkC,GAAe,CACnBlE,iBAAkB,GAClByD,WAAW,EACX3O,KAAK,GACL4H,YAAY,CACVnH,MAAM,GACN+H,QAAQ,GAEVkG,cAAc,EACd7O,YAAY,IA0CCwP,GAvCC,WAAkC,IAAjC1C,EAAgC,uDAAxByC,GAAcE,EAAU,uCAC/C,OAAQA,EAAO9I,MAEb,IAAI,qBACF,OAAO,2BACFmG,GADL,IAEEgC,UAAWW,EAAO/I,UAItB,IAAI,eACF,OAAO,2BACFoG,GADL,IAEEzB,iBAAiB,eACZoE,EAAO/I,QAAQ2I,UAEpBlP,KAAMsP,EAAO/I,QAAQvG,KACrB0O,aAAcY,EAAO/I,QAAQmI,eAGjC,IAAI,oBACF,OAAO,2BACF/B,GADL,IAEE9M,YAAayP,EAAO/I,UAGxB,IAAI,qBACF,OAAO,2BACFoG,GADL,IAEE/E,YAAY,2BACP+E,EAAM/E,aACN0H,EAAO/I,WAGhB,QACE,OAAOoG,I,SClCE4C,GAJDC,aAAYH,GAASI,aAAgBC,OCHnDC,IAASf,OACL,cAAC,IAAD,CAAUW,MAAOA,GAAjB,SACE,cAAC,IAAD,UACE,cAAC,GAAD,QAGNxB,SAAS6B,eAAe,W","file":"static/js/main.7cb56a4d.chunk.js","sourcesContent":["import WeatherService from \"../services/weather-service\";\r\nimport CityService from \"../services/city-service\";\r\n\r\nconst {fetchCityPrompt} = new CityService();\r\nconst {fetchOneCallForecast} = new WeatherService();\r\n\r\n// payload сл структуры: {city, cityNotFound, forecast}\r\nconst setForecast = (payload) =>({\r\n    type: `SET_FORECAST`,\r\n    payload\r\n});\r\n\r\n// задание loading статуса, bool\r\nconst setLoadingStatus = (payload) =>({\r\n  type: `SET_LOADING_STATUS`,\r\n  payload\r\n});\r\n\r\n// payload сл структуры: {value, status}, поля не обязательные\r\nconst fetchSearchInput = (payload) =>({\r\n    type: `FETCH_SEARCH_INPUT`,\r\n    payload\r\n});\r\n\r\n// получение и отправка в store погоды\r\nconst fetchForecast = (city) => (dispatch) =>{\r\n\r\n  dispatch(setLoadingStatus(true));\r\n\r\n  fetchOneCallForecast(city)\r\n    .then((forecast) => dispatch(setForecast({\r\n        forecast,\r\n        city,\r\n        cityNotFound: false\r\n      }))\r\n    )\r\n    .catch(() => dispatch(setForecast({\r\n        forecast: {},\r\n        city,\r\n        cityNotFound: true\r\n      }))\r\n    )\r\n    .finally(() => dispatch(setLoadingStatus(false)));\r\n};\r\n\r\n// payload сл структуры: [{city, country, region_with_type}...]\r\nconst fetchSuggestions = (string) => (dispatch) =>{\r\n  fetchCityPrompt(string)\r\n    .then((payload) => dispatch({\r\n      type: `FETCH_SUGGESTIONS`,\r\n      payload\r\n    }))\r\n};\r\n\r\nexport {\r\n  fetchSuggestions,\r\n  fetchSearchInput,\r\n  fetchForecast\r\n}","export default class CityService {\r\n  #url = \"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/address\";\r\n  #token = \"f29add880face76a911482eca39455ab65d23208\";\r\n\r\n  // метод для преобразования массива suggestions\r\n   #transformSuggestions = (suggestions, query) =>{\r\n    suggestions = suggestions.filter(({data:{city}}) => {\r\n      // фильтруем массив, оставляя только те города, что соответствуют исходной строке\r\n      if (city) {\r\n        city = city.toLowerCase();\r\n        if (city.includes(query)) {\r\n          return true\r\n        }\r\n        return false;\r\n      }\r\n    }).map(({data: {city, region_with_type, country}}) =>\r\n      // облегчаем структуру, каждого объекта\r\n      ({\r\n        city,\r\n        region_with_type,\r\n        country\r\n      }))\r\n      .reduce((accum, value) =>{\r\n        // исключаем повторы в результатах\r\n        if (!accum.find(({city}) => city === value.city)){\r\n          accum.push(value)\r\n        }\r\n        return accum;\r\n      }, [])\r\n\r\n    // обрезаем массив если кол-во объектов > 10\r\n    if (suggestions.length > 10){\r\n      suggestions.length = 10;\r\n    }\r\n    return suggestions;\r\n  }\r\n\r\n  fetchCityPrompt = (query) =>{\r\n    query = query.toLowerCase().trim();\r\n    const options = {\r\n      method: \"POST\",\r\n      mode: \"cors\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"Token \" + this.#token\r\n      },\r\n      body: JSON.stringify({query, count:20})\r\n    }\r\n    return fetch(this.#url, options)\r\n      .then(response => response.json())\r\n      .then(({suggestions}) => this.#transformSuggestions(suggestions, query))\r\n      .catch(error => error);\r\n  }\r\n}","\r\nexport default class WeatherService {\r\n\r\n  #coordinatesPath = `https://api.openweathermap.org/data/2.5/weather?appid=61fdf6f7410c8d947a85a69de8f6587d`;\r\n  #weatherPath = `https://api.openweathermap.org/data/2.5/onecall?appid=61fdf6f7410c8d947a85a69de8f6587d&units=metric&lang=ru&exclude=minutely,hourly,alerts`;\r\n\r\n  convertForecast = new class {\r\n\r\n  // возвращает преобразованное время в мс в соответствии с timeZoneOffset\r\n  #returnLocalTimeMs = (seconds, timeZoneOffsetSeconds) =>{\r\n    let date = new Date(seconds * 1000)\r\n\r\n    return (seconds * 1000) + (date.getTimezoneOffset() * 60 * 1000) + timeZoneOffsetSeconds * 1000;\r\n  }\r\n\r\n  #returnDetailedDate = (seconds, timeZoneOffsetSeconds) =>{\r\n\r\n    let date;\r\n\r\n    if (timeZoneOffsetSeconds){\r\n      date = new Date(this.#returnLocalTimeMs(seconds, timeZoneOffsetSeconds));\r\n    }\r\n    else {\r\n      date = new Date(seconds * 1000);\r\n    }\r\n\r\n    const shortMonthTemplates = {\r\n      1: `янв`, 2: `фев`, 3: `марта`,\r\n      4: `апр`, 5: `мая`, 6: `июня`,\r\n      7: `июля`, 8: `авг`, 9: `сент`,\r\n      10: `окт`, 11: `нояб`, 12: `дек`\r\n    };\r\n\r\n    const returnIntlDate = (options) => new Intl.DateTimeFormat(`ru`, options).format(date);\r\n\r\n    // опции сформированы таким образом, чтобы месяц был в нужном падеже, а после его отделяем от дня\r\n    const month = returnIntlDate({\r\n      day: `numeric`,\r\n      month: \"long\"\r\n    }).match(/[а-яА-я]+$/gm).toString();\r\n    let shortMonth = shortMonthTemplates[(date.getMonth() + 1)];\r\n\r\n    // опция `2-digit` не работает для minute, поэтому вырезаем результат из полноценной даты\r\n    const minutes = returnIntlDate({hour:`2-digit`, minute:`2-digit`}).slice(3);\r\n\r\n    return{\r\n      day: date.getDate(),\r\n      month,\r\n      shortMonth,\r\n      weekday: returnIntlDate({weekday: `long`}),\r\n      hours: returnIntlDate({hour: `2-digit`}),\r\n      minutes\r\n    }\r\n  }\r\n\r\n  // возвращает строку с температурой, при необходимости можно задать кол-во цифр после запятой\r\n  #returnTemperature = (number, fractionDigits) =>{\r\n    number = (fractionDigits) ? number.toFixed(fractionDigits) : Math.round(number);\r\n\r\n    if (number > 0){\r\n      return `+${number}°c`\r\n    }\r\n    else if(number < 0){\r\n      return `−${String(number).slice(1)}°c`\r\n    }\r\n    return `${number}°c`\r\n  }\r\n\r\n// переводит значение давления над уровнем моря в мм рт. ст.\r\n  #returnAtmospherePressure = (seaLevel) => Math.round(seaLevel / 1.36);\r\n\r\n// возвращает направление ветра в зависимости от градуса\r\n  #returnWindDirection = (deg) =>{\r\n    if ((deg >= 337.5 && deg <= 360) || (deg >= 0 && deg < 22.5) ){\r\n      return {full: `Северный`, short: `C`};\r\n    }\r\n    if (deg >= 22.5 && deg < 67.5){\r\n      return {full: `Северо-восточный`, short: `CВ`};\r\n    }\r\n    if (deg >= 67.5 && deg < 112.5){\r\n      return {full: `Восточный`, short: `В`};\r\n    }\r\n    if (deg >= 112.5 && deg < 157.5){\r\n      return {full: `Юго-восточный`, short: `ЮВ`};\r\n    }\r\n    if (deg >= 157.5 && deg < 202.5){\r\n      return {full: `Южный`, short: `Ю`};\r\n    }\r\n    if (deg >= 202.5 && deg < 247.5){\r\n      return {full: `Юго-западный`, short: `ЮЗ`};\r\n    }\r\n    if (deg >= 247.5 && deg < 292.5){\r\n      return {full: `Западный`, short: `З`};\r\n    }\r\n    if (deg >= 292.5 && deg < 337.5){\r\n      return {full: `Северо-западный`, short: `CЗ`};\r\n    }\r\n  }\r\n\r\n  // возвращает время дня в зависимости от времени восхода/заката\r\n  #returnTimeOfDay = (currentTime, sunriseTime, sunsetTime, timeZoneOffsetSeconds) =>{\r\n\r\n    // приводим все значения к единому формату\r\n    currentTime = this.#returnLocalTimeMs(currentTime, timeZoneOffsetSeconds)\r\n    sunriseTime = this.#returnLocalTimeMs(sunriseTime, timeZoneOffsetSeconds)\r\n    sunsetTime = this.#returnLocalTimeMs(sunsetTime, timeZoneOffsetSeconds)\r\n\r\n    if(currentTime >= sunriseTime && currentTime <= sunsetTime){\r\n      return `day`;\r\n    }\r\n    return `night`;\r\n  }\r\n\r\n  // конвертирует полученный прогноз в необходимый для отображения вид\r\n  #convertSingleForecast = (value, timezoneOffset) =>{\r\n    let {dt, sunrise, sunset, feels_like, temp, weather, wind_speed, wind_deg, humidity, pressure} = value;\r\n\r\n    let convertedTemp, convertedFeelingTemp;\r\n\r\n    // в зависимости от типа прогноза, преобразуем данные необходимым образом\r\n    if (typeof temp === `object` && typeof feels_like === `object`){\r\n      convertedTemp = {\r\n        morn: this.#returnTemperature(temp.morn),\r\n        day: this.#returnTemperature(temp.day),\r\n        night: this.#returnTemperature(temp.night),\r\n      }\r\n      convertedFeelingTemp = {\r\n        morn: this.#returnTemperature(feels_like.morn),\r\n        day: this.#returnTemperature(feels_like.day),\r\n        night: this.#returnTemperature(feels_like.night),\r\n      }\r\n    }\r\n    else if (typeof temp === `number` && typeof feels_like === `number`){\r\n      convertedTemp = this.#returnTemperature(temp, 1);\r\n      convertedFeelingTemp = this.#returnTemperature(feels_like);\r\n    }\r\n\r\n    return {\r\n      date: this.#returnDetailedDate(dt, timezoneOffset),\r\n      timeOfDay: this.#returnTimeOfDay(dt, sunrise, sunset, timezoneOffset),\r\n      sunriseTime: this.#returnDetailedDate(sunrise, timezoneOffset),\r\n      sunsetTime: this.#returnDetailedDate(sunset, timezoneOffset),\r\n      temp: convertedTemp,\r\n      feelingTemp: convertedFeelingTemp,\r\n      description: weather[0].description,\r\n      windSpeed: wind_speed.toFixed(1),\r\n      windDirection: this.#returnWindDirection(wind_deg),\r\n      pressure: this.#returnAtmospherePressure(pressure),\r\n      humidity,\r\n      weatherId: weather[0].id\r\n    }\r\n  }\r\n\r\n  // конвертирует весь объект с прогнозами\r\n  convertForecast = (weatherObj) =>{\r\n    weatherObj.current = this.#convertSingleForecast(weatherObj.current, weatherObj.timezone_offset);\r\n    weatherObj.daily = weatherObj.daily.map((value) => this.#convertSingleForecast(value, weatherObj.timezone_offset))\r\n    return weatherObj;\r\n  }\r\n}().convertForecast;\r\n\r\n  // метод для получения множества типов прогноза\r\n  fetchOneCallForecast = async (city) => {\r\n    const coord = await this.fetchCityCoordinates(city);\r\n    if (coord){\r\n      const path = this.#weatherPath + `&lat=${coord.lat}&lon=${coord.lon}`\r\n      return fetch(path)\r\n        .then((result) => result.json())\r\n        .then((data) => this.convertForecast(data))\r\n        .catch((err) => err);\r\n    }\r\n    return new Promise((r, reject)=> reject(`Данный город не найден`));\r\n  }\r\n\r\n  // метод для получения координат запрошенного города\r\n  fetchCityCoordinates = (city) => (\r\n    fetch(this.#coordinatesPath + `&q=${city}`)\r\n      .then((result) => result.json())\r\n      .then((data) => data.coord)\r\n      .catch((err) => err));\r\n}","\r\n// возвращает id таба\r\nconst returnTabId = (activeTabId) => Number(activeTabId.slice(0,1)) - 1;\r\n\r\n// возвращает объект со структурно разбитым url\r\nconst returnStructuredPath = (path) => {\r\n  const regExp = /^(\\/(?<structuredPathCity>.+)\\/)(?<structuredPathParameter>[a-z0-9-]+)|^\\/(?<singleCity>[^/]+)\\/?/gm;\r\n  let result = [...path.matchAll(regExp)];\r\n\r\n  if (result.length > 0) {\r\n    const {structuredPathCity, structuredPathParameter, singleCity} = result[0].groups;\r\n\r\n    if (structuredPathCity && structuredPathParameter) {\r\n      return {\r\n        city: structuredPathCity,\r\n        parameter: structuredPathParameter\r\n      }\r\n    }\r\n    if (singleCity) {\r\n      return {\r\n        city: singleCity,\r\n        parameter: ``\r\n      };\r\n    }\r\n  }\r\n  return {\r\n    city: ``,\r\n    parameter: ``\r\n  };\r\n}\r\n\r\n// возвращает bgc в соответствии с id погоды\r\nconst returnBackground = (id, timesOfDay) =>{\r\n\r\n  let bgcPath = ``;\r\n\r\n  // cloud weather\r\n  if (id >= 801 && id <=804){\r\n    bgcPath = {\r\n      day: `d_c.jpg`,\r\n      night: `n_c.jpg`\r\n    } ;\r\n  }\r\n\r\n  //rain weather\r\n  if (id >= 500 && id <=531){\r\n    bgcPath = {\r\n      day: `d_r.webp`,\r\n      night: `n_r.jpg`\r\n    } ;\r\n  }\r\n\r\n  // snowy weather\r\n  if (id >= 600 && id <=622){\r\n    bgcPath = {\r\n      day: `d_s.jpg`,\r\n      night: `n_s.jpg`\r\n    } ;\r\n  }\r\n\r\n  //clear weather\r\n  if (id === 800){\r\n    bgcPath = {\r\n      day: `d.jpg`,\r\n      night: `n.png`\r\n    } ;\r\n  }\r\n\r\n  return `url(/backgrounds/${timesOfDay}/${bgcPath[timesOfDay]})`;\r\n}\r\n\r\nexport {\r\n  returnBackground,\r\n  returnTabId,\r\n  returnStructuredPath,\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {fetchSearchInput} from \"../../actions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./search.scss\";\r\n\r\nconst Search = ({submitFunc, value, fetchSearchInput}) =>{\r\n\r\n  // отправляем в store значение input\r\n  const onchange = ({target:{value}}) => fetchSearchInput({value});\r\n\r\n  // при фокусе input сменяем в store inputStatus\r\n  const onFocus = () => fetchSearchInput({status:true});\r\n\r\n  // при событии форматируем строку, отправляем в store, и меняем url в соответствии со строкой\r\n  onsubmit = (evt) =>{\r\n    evt.preventDefault();\r\n    if (value){\r\n      value = value[0].toUpperCase() + value.slice(1);\r\n      fetchSearchInput({value});\r\n      submitFunc(value);\r\n    }\r\n  }\r\n\r\n  return(\r\n    <div className=\"search\">\r\n      <form className=\"search__form\">\r\n        <input type=\"text\" className=\"search__input\" autoFocus placeholder=\"Введите город\" onChange={onchange} value={value}\r\n               onFocus={onFocus} data-search/>\r\n        <button className=\"search__button\" type=\"submit\" onSubmit={onsubmit} data-search>Поиск</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = ({searchInput: {value}}) => ({value});\r\n\r\nconst mapDispatchToProps = {fetchSearchInput}\r\n\r\nSearch.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  submitFunc: PropTypes.func.isRequired,\r\n  fetchSearchInput: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);","import Search from \"./search\";\r\nexport default Search;","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {fetchSearchInput} from \"../../actions\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {returnStructuredPath} from \"../../utils\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./suggestions.scss\";\r\n\r\nconst Suggestions = ({suggestionsArr, fetchSearchInput, history}) =>{\r\n\r\n  const {parameter} = returnStructuredPath(history.location.pathname);\r\n\r\n  // преобразуем массив городов в массив react элементов\r\n  suggestionsArr = suggestionsArr.map(({city, country, region_with_type}, id) =>{\r\n\r\n    // в случае, если в существующем url присутствует параметр, добавляем его в link\r\n    let path = (parameter !== ``) ? `/${city}/${parameter}`: `/${city}/`;\r\n\r\n    // по клику меняем inputStatus и отправляем значение city для search-input\r\n    const clickFunc = () =>{\r\n      fetchSearchInput({status: false, value: city});\r\n    }\r\n\r\n    return (\r\n      <NavLink className=\"suggestion\" to={path} data-suggestion key={id} exact onClick={clickFunc}>\r\n        <span className=\"suggestion__city\" data-suggestion>{city}</span> <span className=\"suggestion__region\" data-suggestion>{`${region_with_type}, ${country}`}</span>\r\n      </NavLink>\r\n    );\r\n  });\r\n\r\n  return (<div className=\"suggestions\" data-suggestions>{suggestionsArr}</div>);\r\n}\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = {fetchSearchInput}\r\n\r\nSuggestions.propTypes = {\r\n  suggestionsArr: PropTypes.arrayOf(PropTypes.shape({\r\n    city: PropTypes.string.isRequired,\r\n    country: PropTypes.string.isRequired,\r\n    region_with_type: PropTypes.string.isRequired,\r\n  })),\r\n  fetchSearchInput: PropTypes.func.isRequired,\r\n  history: PropTypes.object.isRequired\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Suggestions));","import Suggestions from \"./suggestions\";\r\nexport default Suggestions;","import ForecastTabs from \"./forecast-tabs\";\r\nexport default ForecastTabs;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nimport \"./forecast-tabs.scss\";\r\n\r\n// компонент переключатель видов прогноза\r\nconst ForecastTabs = ({city, children}) =>(\r\n  <ul className=\"forecast-tabs\">\r\n    {children.map(({id, title, url}) =>\r\n      <li className=\"forecast-tab\" key={id}><NavLink to={`/${city}/${url}`} exact>{title}</NavLink></li>\r\n    )}\r\n  </ul>);\r\n\r\nForecastTabs.propTypes = {\r\n  city: PropTypes.string.isRequired,\r\n  children: PropTypes.arrayOf(PropTypes.object).isRequired\r\n}\r\n\r\nexport default ForecastTabs;","export default __webpack_public_path__ + \"static/media/500.37505976.svg\";","export default __webpack_public_path__ + \"static/media/501.93e28347.svg\";","export default __webpack_public_path__ + \"static/media/600.db84f9d2.svg\";","export default __webpack_public_path__ + \"static/media/601.2c04d126.svg\";","export default __webpack_public_path__ + \"static/media/602.cd923bf4.svg\";","export default __webpack_public_path__ + \"static/media/611.5f3378e1.svg\";","export default __webpack_public_path__ + \"static/media/612.dcfd8a33.svg\";","export default __webpack_public_path__ + \"static/media/616.5f3378e1.svg\";","export default __webpack_public_path__ + \"static/media/701.116dc113.svg\";","export default __webpack_public_path__ + \"static/media/711.116dc113.svg\";","export default __webpack_public_path__ + \"static/media/721.116dc113.svg\";","export default __webpack_public_path__ + \"static/media/731.116dc113.svg\";","export default __webpack_public_path__ + \"static/media/741.116dc113.svg\";","export default __webpack_public_path__ + \"static/media/751.116dc113.svg\";","export default __webpack_public_path__ + \"static/media/761.116dc113.svg\";","export default __webpack_public_path__ + \"static/media/762.116dc113.svg\";","export default __webpack_public_path__ + \"static/media/771.116dc113.svg\";","export default __webpack_public_path__ + \"static/media/781.116dc113.svg\";","export default __webpack_public_path__ + \"static/media/800.81717d99.svg\";","export default __webpack_public_path__ + \"static/media/801.9a05e411.svg\";","export default __webpack_public_path__ + \"static/media/802.98ccbaba.svg\";","export default __webpack_public_path__ + \"static/media/803.9a05e411.svg\";","export default __webpack_public_path__ + \"static/media/804.98ccbaba.svg\";","export default __webpack_public_path__ + \"static/media/pressure.e54f8c71.svg\";","export default __webpack_public_path__ + \"static/media/humidity.9a365bd0.svg\";","export default __webpack_public_path__ + \"static/media/wind.32483f4b.svg\";","import id500 from \"./500.svg\";\r\nimport id501 from \"./501.svg\";\r\nimport id600 from \"./600.svg\";\r\nimport id601 from \"./601.svg\";\r\nimport id602 from \"./602.svg\";\r\nimport id611 from \"./611.svg\";\r\nimport id612 from \"./612.svg\";\r\nimport id616 from \"./616.svg\";\r\nimport id701 from \"./701.svg\";\r\nimport id711 from \"./711.svg\";\r\nimport id721 from \"./721.svg\";\r\nimport id731 from \"./731.svg\";\r\nimport id741 from \"./741.svg\";\r\nimport id751 from \"./751.svg\";\r\nimport id761 from \"./761.svg\";\r\nimport id762 from \"./762.svg\";\r\nimport id771 from \"./771.svg\";\r\nimport id781 from \"./781.svg\";\r\nimport id800 from \"./800.svg\";\r\nimport id801 from \"./801.svg\";\r\nimport id802 from \"./802.svg\";\r\nimport id803 from \"./803.svg\";\r\nimport id804 from \"./804.svg\";\r\nimport pressure from \"./icons/pressure.svg\";\r\nimport humidity from \"./icons/humidity.svg\";\r\nimport wind from \"./icons/wind.svg\";\r\n\r\nconst WeatherImgCollections = {\r\n  id500,\r\n  id501,\r\n  id600,\r\n  id601,\r\n  id602,\r\n  id611,\r\n  id612,\r\n  id616,\r\n  id701,\r\n  id711,\r\n  id721,\r\n  id731,\r\n  id741,\r\n  id751,\r\n  id761,\r\n  id762,\r\n  id771,\r\n  id781,\r\n  id800,\r\n  id801,\r\n  id802,\r\n  id803,\r\n  id804,\r\n}\r\n\r\nconst WeatherIcons = {\r\n  pressure,\r\n  humidity,\r\n  wind\r\n}\r\n\r\nexport {\r\n  WeatherImgCollections,\r\n  WeatherIcons\r\n}","import WeatherTabs from \"./weather-tabs\";\r\nexport default WeatherTabs;","import React from \"react\";\r\nimport {returnTabId} from \"../../utils\";\r\nimport {connect} from \"react-redux\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {WeatherImgCollections} from \"../weather-card/img\";\r\nimport \"./weather-tabs.scss\";\r\n\r\nconst WeatherTabs = ({daily, city, activeTabId}) =>{\r\n\r\n  let start, end, componentsArr = [];\r\n\r\n  // в зависимости от номера активного таба, получаем нумерацию предыдущего и последующего таба\r\n  if (activeTabId){\r\n\r\n    const tabId = returnTabId(activeTabId);\r\n\r\n    if (tabId > 0 && tabId < daily.length - 1){\r\n      start = tabId - 1;\r\n      end = tabId + 1;\r\n    }\r\n\r\n    else if (tabId === daily.length - 1){\r\n      start = tabId - 2;\r\n      end = tabId;\r\n    }\r\n  }\r\n  else {\r\n    start = 0;\r\n    end = 2;\r\n  }\r\n\r\n  // составляем массив react элементов\r\n  for (let i = start; i <= end; i++){\r\n\r\n    const {date, temp:{day, night}, description, weatherId } = daily[i];\r\n\r\n    let NavLinkPath = (i === 0) ? `/${city}/` : `/${city}/${i + 1}-day`;\r\n\r\n    const img = WeatherImgCollections[`id${weatherId}`];\r\n\r\n    let component = (\r\n      <li key={i} className=\"weather-tab__wrap\">\r\n        <NavLink to={NavLinkPath} className=\"weather-tab\" exact>\r\n          <div className=\"weather-tab__row\">\r\n            <p className=\"weather-tab__date\">{date.day} {date.month}</p>\r\n          </div>\r\n          <div className=\"weather-tab__row\">\r\n            <div>\r\n              <p className=\"weather-tab__temperature\">{day}</p>\r\n              <p className=\"weather-tab__temperature\">{night}</p>\r\n            </div>\r\n            <img src={img} alt={description} className=\"weather-tab__icon\"/>\r\n          </div>\r\n        </NavLink>\r\n      </li>\r\n    );\r\n    componentsArr.push(component)\r\n  }\r\n\r\n  return (<ul className=\"weather-tabs\">{componentsArr}</ul>);\r\n}\r\n\r\nconst mapStateToProps = ({city, weatherForecasts:{daily}}) =>({city, daily});\r\n\r\nWeatherTabs.propTypes = {\r\n  activeTabId : PropTypes.string,\r\n  city : PropTypes.string.isRequired,\r\n  daily : PropTypes.arrayOf(PropTypes.object).isRequired\r\n};\r\n\r\nexport default connect(mapStateToProps)(WeatherTabs);","import WeatherCard from \"./weather-card\";\r\nexport default WeatherCard;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {returnTabId} from \"../../utils\";\r\nimport PropTypes from \"prop-types\";\r\nimport {currentTemplate, oneDayTemplate, sevenDaysTemplate} from \"./templates\";\r\n\r\nimport \"./weather-card.scss\";\r\n\r\nconst WeatherCard = ({template, weatherForecasts, city, dayId}) => {\r\n  // в зависимости от шаблона по разному формируем карточку\r\n  const {current, daily} = weatherForecasts;\r\n\r\n  let selectedTemplate;\r\n\r\n  switch (template) {\r\n    case `current`:\r\n      selectedTemplate = currentTemplate(current, city);\r\n      break;\r\n    case `oneDay`:\r\n      dayId = returnTabId(dayId);\r\n      selectedTemplate =  oneDayTemplate(daily[dayId], city);\r\n      break;\r\n    case `sevenDays`:\r\n      selectedTemplate = sevenDaysTemplate(daily, city);\r\n      break;\r\n  }\r\n  return (<section className=\"weather-cards\">{selectedTemplate}</section>)\r\n  }\r\n\r\nconst mapStateToProps = ({weatherForecasts:{current, daily}, city}) => ({\r\n  weatherForecasts:{current, daily},\r\n  city\r\n});\r\n\r\nWeatherCard.propTypes = {\r\n  template: PropTypes.string.isRequired,\r\n  city: PropTypes.string.isRequired,\r\n  dayId: PropTypes.string,\r\n  weatherForecasts: PropTypes.shape({\r\n    current: PropTypes.object.isRequired,\r\n    daily: PropTypes.array.isRequired,\r\n  }).isRequired\r\n}\r\n\r\nexport default connect(mapStateToProps)(WeatherCard);","import {returnBackground} from \"../../../utils\";\r\nimport React from \"react\";\r\n\r\n// шаблон прогноза для текущей погоды\r\nconst currentTemplate = (value, city) => {\r\n\r\n  const {date, timeOfDay, sunriseTime, sunsetTime, temp, feelingTemp, description, windSpeed, windDirection, pressure, humidity, weatherId} = value;\r\n\r\n  // получаем путь для bgc\r\n  const backgroundStyle = {\r\n    backgroundImage: returnBackground(weatherId, timeOfDay)\r\n  };\r\n\r\n  return (\r\n    <div className=\"weather-card--current\" style={backgroundStyle}>\r\n\r\n      <p className=\"weather-card--current__city\">{city}</p>\r\n      <p className=\"weather-card--current__date\">{`${date.day} ${date.month}, ${date.hours}:${date.minutes}`}</p>\r\n      <div className=\"weather-card--current__row\">\r\n        <span className=\"weather-card--current__sunrise\">{`восход ${sunriseTime.hours}:${sunriseTime.minutes}`}</span>\r\n        <span className=\"weather-card--current__temperature\">{temp}</span>\r\n        <span className=\"weather-card--current__sunset\">{`закат ${sunsetTime.hours}:${sunsetTime.minutes}`}</span>\r\n      </div>\r\n      <p className=\"weather-card--current__feeling\">по ощущению {feelingTemp}</p>\r\n      <p className=\"weather-card--current__description\">{description}</p>\r\n\r\n      <div className=\"weather-card--current__row\">\r\n        <div className=\"weather-card--current__fact\">\r\n          <div className=\"weather-card--current__icon wind\"></div>\r\n          <span>{windSpeed} м/с, {windDirection.short}</span>\r\n        </div>\r\n        <div className=\"weather-card--current__fact\">\r\n          <div className=\"weather-card--current__icon humidity\"></div>\r\n          <span>{humidity}%</span>\r\n        </div>\r\n        <div className=\"weather-card--current__fact\">\r\n          <div className=\"weather-card--current__icon pressure\"></div>\r\n          <span>{pressure} мм рт. ст.</span>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport {currentTemplate};","import React from \"react\";\r\nimport {WeatherIcons, WeatherImgCollections} from \"../img\";\r\n\r\n// шаблон прогноза на день\r\nconst oneDayTemplate = (value, city) => {\r\n\r\n  // преобразуем данные полученные от API\r\n  const {date, temp, feelingTemp, description, weatherId, windSpeed, windDirection, humidity, pressure} = value;\r\n\r\n  return (\r\n    <div className=\"weather-card--extended\">\r\n\r\n      <div className=\"weather-card--extended__row\">\r\n        <span className=\"weather-card--extended__city\">{city}</span>\r\n        <p className=\"weather-card--extended__date\">{`${date.weekday}`} <br/> {`${date.day} ${date.month}`}</p>\r\n      </div>\r\n\r\n      <div className=\"weather-card--extended__row pd\">\r\n\r\n        <div className=\"weather-card--extended__row-item\">\r\n          <p className=\"weather-card--extended__time-of-day\">Утром</p>\r\n          <p className=\"weather-card--extended__temperature\">{temp.morn}</p>\r\n        </div>\r\n\r\n        <div className=\"weather-card--extended__row-item\">\r\n          <p className=\"weather-card--extended__time-of-day\">Днем</p>\r\n          <p className=\"weather-card--extended__temperature\">{temp.day}</p>\r\n        </div>\r\n\r\n        <div className=\"weather-card--extended__row-item\">\r\n          <p className=\"weather-card--extended__time-of-day\">Ночью</p>\r\n          <p className=\"weather-card--extended__temperature\">{temp.night}</p>\r\n        </div>\r\n\r\n      </div>\r\n\r\n      <div className=\"weather-card--extended__row\">\r\n        <p className=\"weather-card--extended__feelings\">Ощущается как:</p>\r\n      </div>\r\n\r\n      <div className=\"weather-card--extended__row pd\">\r\n\r\n        <div className=\"weather-card--extended__row-item\">\r\n          <p className=\"weather-card--extended__temperature\">{feelingTemp.morn}</p>\r\n        </div>\r\n\r\n        <div className=\"weather-card--extended__row-item\">\r\n          <p className=\"weather-card--extended__temperature\">{feelingTemp.day}</p>\r\n\r\n        </div>\r\n\r\n        <div className=\"weather-card--extended__row-item\">\r\n          <p className=\"weather-card--extended__temperature\">{feelingTemp.night}</p>\r\n        </div>\r\n\r\n      </div>\r\n\r\n      <div className=\"weather-card--extended__facts\">\r\n\r\n        <div className=\"weather-card--extended__row jcl\">\r\n          <img src={WeatherImgCollections[`id${weatherId}`]} alt=\"\"\r\n               className=\"weather-card--extended__characteristic-icon\"/>\r\n          <p className=\"weather-card--extended__fact\">{description}</p>\r\n        </div>\r\n\r\n        <div className=\"weather-card--extended__row jcl\">\r\n          <img src={WeatherIcons.wind} alt=\"\" className=\"weather-card--extended__characteristic-icon\"/>\r\n          <p className=\"weather-card--extended__fact\">Скорость ветра {windSpeed} м/с {windDirection.short}</p>\r\n        </div>\r\n        <div className=\"weather-card--extended__row jcl\">\r\n          <img src={WeatherIcons.humidity} alt=\"\" className=\"weather-card--extended__characteristic-icon\"/>\r\n          <p className=\"weather-card--extended__fact\">Влажность {humidity}%</p>\r\n        </div>\r\n        <div className=\"weather-card--extended__row jcl\">\r\n          <img src={WeatherIcons.pressure} alt=\"\" className=\"weather-card--extended__characteristic-icon\"/>\r\n          <p className=\"weather-card--extended__fact\">Давление {pressure} мм рт. ст.</p>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport {oneDayTemplate};","import {WeatherImgCollections} from \"../img\";\r\nimport React from \"react\";\r\n\r\n// шаблон прогноза на неделю\r\nconst sevenDaysTemplate = (values, city) =>(\r\n  values.map((value, id) => {\r\n\r\n    const {date, temp, description, weatherId} = value;\r\n\r\n    // получаем изображение из коллекции\r\n    const img = WeatherImgCollections[`id${weatherId}`];\r\n\r\n    return (\r\n      <div className=\"weather-card\" key={id}>\r\n        <div className=\"weather-card__row\">\r\n          <p className=\"weather-card__city\">{city}</p>\r\n          <div className=\"weather-card__date\">\r\n            <p className=\"weather-card__day\">{date.day}</p>\r\n            <p className=\"weather-card__month\">{date.shortMonth}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"weather-card__row\">\r\n          <div>\r\n            <p className=\"weather-card__temperature\">{temp.day}</p>\r\n            <p className=\"weather-card__temperature\">{temp.night}</p>\r\n          </div>\r\n          <img src={img} alt={description} className=\"weather-card__icon\"/>\r\n        </div>\r\n        <span className=\"weather-card__description\">{description}</span>\r\n      </div>\r\n    );\r\n  }));\r\n\r\nexport {sevenDaysTemplate};","import Notification from \"./notification\";\r\nexport default Notification;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./notification.scss\";\r\n\r\nconst Notification = ({children}) => (<div className=\"notification\">{children}</div>);\r\n\r\nNotification.propTypes = {\r\n  children: PropTypes.string\r\n}\r\n\r\nexport default Notification;","import Spinner from \"./spinner\";\r\nexport default Spinner;","import React from \"react\";\r\n\r\nimport \"./spinner.scss\";\r\n\r\nconst Spinner = () =>(\r\n    <div className=\"spinner\">\r\n      <div className=\"loadingio-spinner-eclipse-b6jeeda3c3b\">\r\n        <div className=\"ldio-qcrx01p4y3\">\r\n          <div></div>\r\n        </div>\r\n      </div>\r\n    </div>);\r\n\r\nexport default Spinner;","import React, {Component} from \"react\";\r\nimport Notification from \"../notification\";\r\n\r\nexport default class ErrorBoundary extends Component {\r\n\r\n  state = {\r\n    hasError: false\r\n  }\r\n\r\n  componentDidCatch() {\r\n    this.setState({hasError: true});\r\n  }\r\n\r\n  render() {\r\n\r\n    if (this.state.hasError) {\r\n      if (this.props.emptyComponent) {\r\n        return <></>;\r\n      }\r\n      return <Notification>{`Что-то пошло не так`}</Notification>\r\n    }\r\n    return this.props.children;\r\n  }\r\n}","import ErrorBoundary from \"./error-boundary\";\r\nexport default ErrorBoundary;","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {fetchSuggestions, fetchSearchInput, fetchForecast} from \"../../actions\";\r\nimport {Route, withRouter} from \"react-router-dom\";\r\nimport {returnStructuredPath} from \"../../utils\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Search from \"../search\";\r\nimport Suggestions from \"../suggestions\";\r\nimport ForecastTabs from \"../forecast-tabs\";\r\nimport WeatherTabs from \"../weather-tabs\";\r\nimport WeatherCard from \"../weather-card\";\r\nimport Notification from \"../notification\";\r\nimport Spinner from \"../spinner\";\r\nimport ErrorBoundary from \"../error-boundary\";\r\nimport \"./app.scss\";\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    timer: null\r\n  };\r\n\r\n  // данные для forecastTabs\r\n  forecastTabData = [\r\n    {id: 0, title: `Сейчас`, url: `now`},\r\n    {id: 1, title: `Сегодня`, url: ``},\r\n    {id: 2, title: `Завтра`, url: `2-day`},\r\n    {id: 3, title: `7 дней`, url: `week`},\r\n  ];\r\n\r\n  // при submit пушим значение в url\r\n  searchSubmit = async (city) => {\r\n    const currentPath = this.props.history.location.pathname;\r\n    const {parameter: pathRest} = returnStructuredPath(currentPath);\r\n    this.props.history.push(`/${city}/${pathRest}`);\r\n    this.props.fetchSearchInput({status:false});\r\n  }\r\n\r\n  // handler для смены статуса активности search-input (при false не будет показан блок suggestions)\r\n  suggestionsStatusHandler = ({target:{dataset}}) =>{\r\n    if (!dataset.suggestion && !dataset.search && this.props.searchInput.status){\r\n      this.props.fetchSearchInput({status:false});\r\n    }\r\n  }\r\n\r\n  // при управлении с клавиатуры, также, в нужный момент скрываем блок suggestions\r\n  keyHandler = (evt) =>{\r\n    if (evt.key === `Tab`){\r\n      this.suggestionsStatusHandler(evt);\r\n    }\r\n  }\r\n\r\n  // после монтирования проверяем url и назначаем обработчик\r\n  componentDidMount() {\r\n    const {city: pathCity} = returnStructuredPath(this.props.location.pathname);\r\n    document.addEventListener(`click`, this.suggestionsStatusHandler);\r\n\r\n    // если в url присутствует город, получаем прогноз и отправляем его в store\r\n    if (pathCity) {this.props.fetchForecast(pathCity);}\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const {city: pathCity} = returnStructuredPath(this.props.location.pathname);\r\n    const {city: prevPathCity} = returnStructuredPath(prevProps.location.pathname);\r\n\r\n    // в случае изменения города в url получаем и отправляем в store обновленный прогноз\r\n    if (pathCity && pathCity !== prevPathCity) {\r\n      this.props.fetchForecast(pathCity);\r\n    }\r\n\r\n    // при вводе в input ставим таймер на отправку в store найденных городов\r\n    if (prevProps.searchInput.value !== this.props.searchInput.value) {\r\n      clearTimeout(this.state.timer);\r\n      this.setState({timer: setTimeout(() =>\r\n        this.props.fetchSuggestions(this.props.searchInput.value),300)});\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    const {city, weatherForecasts: {daily, current}, suggestions, searchInput:{status: searchInputStatus}, cityNotFound, isLoading} = this.props;\r\n\r\n    let routes, suggestionsBlock;\r\n\r\n    if (daily && current && city && !cityNotFound && !isLoading) {\r\n      routes = (\r\n        <ErrorBoundary>\r\n          <Route render={() =>(\r\n            <ForecastTabs city={city}>{this.forecastTabData}</ForecastTabs>)}/>\r\n\r\n          <Route path={`/${city}/now`} exact\r\n                 render={() => (<WeatherCard template=\"current\"/>)}/>\r\n\r\n          <Route path={`/${city}/`} exact render={({match:{params:{id}}}) =>\r\n             (<><WeatherTabs activeTabId={id}/>\r\n                <WeatherCard template=\"oneDay\" dayId=\"1-day\"/></>)\r\n          }/>\r\n\r\n          <Route path={`/${city}/:id`} exact render={({match}) => {\r\n\r\n            const {id} = match.params;\r\n\r\n            const pathRegExp = /\\d+-day/gm;\r\n\r\n            if (!pathRegExp.test(id)) {\r\n              return;\r\n            }\r\n\r\n            return (<><WeatherTabs activeTabId={id}/>\r\n                      <WeatherCard template=\"oneDay\" dayId={id}/></>);\r\n          }}/>\r\n\r\n          <Route path={`/${city}/week`} exact\r\n                 render={() => (<WeatherCard template=\"sevenDays\"/>)}/>\r\n        </ErrorBoundary>);\r\n    }\r\n\r\n    if (cityNotFound){\r\n      routes = <Notification>{`Данный город не найден`}</Notification>;\r\n    }\r\n\r\n    if (suggestions && searchInputStatus){\r\n      suggestionsBlock = <ErrorBoundary emptyComponent={true}><Suggestions suggestionsArr={suggestions}/></ErrorBoundary>\r\n    }\r\n\r\n    return (\r\n      <div id=\"app\" onKeyUp={this.keyHandler}>\r\n        <Route path={`/`} render={() =>\r\n          (<><Search submitFunc={this.searchSubmit}/>\r\n           {suggestionsBlock}</>)\r\n        }/>\r\n        {isLoading && <Spinner/>}\r\n        {routes}\r\n      </div>);\r\n  }\r\n}\r\n\r\nApp.propTypes = {\r\n  history: PropTypes.object.isRequired,\r\n  location: PropTypes.object.isRequired,\r\n  fetchForecast: PropTypes.func.isRequired,\r\n  fetchSearchInput: PropTypes.func.isRequired,\r\n  fetchSuggestions: PropTypes.func.isRequired,\r\n  city: PropTypes.string.isRequired,\r\n  isLoading: PropTypes.bool.isRequired,\r\n  cityNotFound: PropTypes.bool.isRequired ,\r\n  searchInput: PropTypes.shape({\r\n    value: PropTypes.string.isRequired,\r\n    status: PropTypes.bool.isRequired\r\n  }).isRequired,\r\n  weatherForecasts: PropTypes.shape({\r\n    current: PropTypes.object,\r\n    daily: PropTypes.array\r\n  }).isRequired}\r\n\r\nconst mapDispatchToProps ={\r\n    fetchSuggestions,\r\n    fetchSearchInput,\r\n    fetchForecast\r\n}\r\n\r\nconst mapStateToProps = (state) => ({...state});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));","import App from \"./app\";\r\nexport default App;","\r\nconst initialState = {\r\n  weatherForecasts: {},\r\n  isLoading: false,\r\n  city: ``,\r\n  searchInput:{\r\n    value:``,\r\n    status: false\r\n  },\r\n  cityNotFound: false,\r\n  suggestions:[]\r\n}\r\n\r\nconst reducer = (state = initialState, action) =>{\r\n  switch (action.type) {\r\n\r\n    case `SET_LOADING_STATUS`:\r\n      return {\r\n        ...state,\r\n        isLoading: action.payload\r\n      }\r\n\r\n    // получение прогнозов (daily, current), города, и статуса, найден ли город\r\n    case `SET_FORECAST`:\r\n      return {\r\n        ...state,\r\n        weatherForecasts: {\r\n          ...action.payload.forecast\r\n        },\r\n        city: action.payload.city,\r\n        cityNotFound: action.payload.cityNotFound\r\n      }\r\n    // получение массива поисковых предложений\r\n    case `FETCH_SUGGESTIONS`:\r\n      return {\r\n        ...state,\r\n        suggestions: action.payload\r\n      }\r\n    // получение информации по поисковой строке (статус и значение)\r\n    case `FETCH_SEARCH_INPUT`:\r\n      return {\r\n        ...state,\r\n        searchInput:{\r\n          ...state.searchInput,\r\n          ...action.payload\r\n        }\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;","import {applyMiddleware, createStore} from \"redux\"\r\nimport reducer from \"./reducers\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n// const middleware = () => (next) => (action) =>{\r\n//   console.log(action.type);\r\n//   console.log(action.payload);\r\n//   return next(action);\r\n// }\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\n\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./components/app\";\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./store\";\r\nimport {BrowserRouter as Router} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <Router>\r\n        <App/>\r\n      </Router>\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}